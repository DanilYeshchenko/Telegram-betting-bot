const user = require('.././database/userDAO');
const keyboard = require('.././keyboards/keyboard');
const inlineKeyboard = require('.././keyboards/inlineKeyboard');
const config = require('../config');
const md5 = require('md5');

exports.paidForecasts = ctx => {
  return ctx.reply('–ü–æ–∫—É–ø–∞—è VIPüíé –ø–æ–¥–ø–∏—Å–∫—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–∞–º—ã–π —Å–æ–∫ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤. ' +
    '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–µ–±–µ –≤ —á–∞—Ç –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ —Å—Ç–∞–≤–∫–∏! –° –ª—É—á—à–∏–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏. ' +
    '–ö –ø—Ä–æ–≥–Ω–æ–∑—É –ø—Ä–∏–ª–∞–≥–∞—é—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –º–æ–∏—Ö —Å—Ç–∞–≤–æ–∫. –í—Å—ë –¥–µ–ª–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ. ' +
    '\n\n–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ. –ß–µ–º –¥–æ–ª—å—à–µ, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ.  üí≥üëáüèº' +
    '\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞', keyboard.vipMenu);
};

exports.week500 = ctx => {
  return ctx.reply('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å VIP –ø—Ä–æ–≥–Ω–æ–∑—ã', inlineKeyboard.payButton500)
};

exports.week1000 = ctx => {
  return ctx.reply('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å VIP –ø—Ä–æ–≥–Ω–æ–∑—ã', inlineKeyboard.payButton1000)
};

exports.balance = async ctx => {
  let balance = await user.getBalance(ctx.from.id);
  return ctx.replyWithMarkdown(`–í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${balance} —Ä—É–±.\n–í–∞—à ID: *${ctx.from.id}*`, keyboard.balanceMenu);
};

exports.refill = ctx => {
  let hash = (Math.random() + '').split('.')[1].slice(0, 8);
  let sign = md5(`${config.storeID}:500:${config.storeKey}:${ctx.from.id}_${hash}`);
  return ctx.reply(`https://www.free-kassa.ru/merchant/cash.php?m=${config.storeID}&oa=500&o=${ctx.from.id}_${hash}&s=${sign}`);
};

exports.subscription = async ctx => {
  let text;
  if (await user.getVIPSubscription(ctx.from.id) == null) text = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
  else if (await user.getFreezeSubscription(ctx.from.id) != null) text = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞';
  else text = '–†–∞–±–æ—Ç–∞–µ—Ç';
  return ctx.reply(`–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: ${text}`, keyboard.subscriptionMenu)
};

exports.freezeSubscription = async ctx => {
  if (await user.getVIPSubscription(ctx.from.id) == null) {
    return ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Ç–∞–∫-–∫–∞–∫ —É –≤–∞—Å –µ—ë –Ω–µ—Ç.');
  }

  let date = await new Date();
  let freezeDate = await user.getFreezeSubscription(ctx.from.id);

  if (await user.getFreezeSubscription(ctx.from.id) != null && await (freezeDate.setDate(freezeDate.getDate() + 2)) > date) {
    return ctx.reply('–ù–µ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∫–∏');
  }
  if (await user.getFreezeSubscription(ctx.from.id) != null) {
    let days = (new Date() - await user.getFreezeSubscription(ctx.from.id)) / 86400000;
    let date = await user.getVIPSubscription(ctx.from.id);

    await date.setDate(await date.getDate() + days);
    await user.setVIPSubscription(ctx.from.id, date);

    await user.setFreezeSubscription(ctx.from.id, null);
    await user.setActiveSubscription(ctx.from.id, true);

    return ctx.replyWithMarkdown(`–í—ã —Ä–æ–∑–∞–º–æ—Ä–æ–∑–∏–ª–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É!\n–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: *${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}*`);
  }

  await user.setFreezeSubscription(ctx.from.id, date);
  await user.setActiveSubscription(ctx.from.id, false);
  return ctx.reply('–í—ã –∑–∞–º–æ—Ä–æ–∑–∏–ª–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É!');
};

exports.referrals = async ctx => {
  countReferrals = await user.getCountReferrals(ctx.from.id)
  return ctx.reply(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥—Ä—É–∑–µ–π: ${countReferrals}\n\n` +
    '–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n' +
    `https://t.me/test532_bot?start=${ctx.from.id}` +
    '\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è 1 —Ä—É–±!')
};

exports.contacts = ctx => {
  return ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç—ã', inlineKeyboard.contacts)
};

exports.channel = ctx => {
  return ctx.reply('–ù–∞—à –∫–∞–Ω–∞–ª', inlineKeyboard.channel)
};

exports.backToMenu = ctx => {
  return ctx.reply('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å VIP –ø—Ä–æ–≥–Ω–æ–∑—ã', keyboard.mainMenu)
};

exports.backToBalance = async ctx => {
  balance = await user.getBalance(ctx.from.id);
  return ctx.replyWithMarkdown(`–í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${balance} —Ä—É–±.\n–í–∞—à ID: *${ctx.from.id}*`, keyboard.balanceMenu);
};
